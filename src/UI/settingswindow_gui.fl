# data file for the Fltk User Interface Designer (fluid)
version 1.0304
header_name {.h}
code_name {.cxx}
decl {\#include "RKR_Box.h"} {public global
}

decl {\#include "RKR_Button.h"} {public global
}

decl {\#include "RKR_Browser.h"} {public global
}

decl {\#include "RKR_Check_Button.h"} {public global
}

decl {\#include "RKR_Choice.h"} {public global
}

decl {\#include "RKR_Counter.h"} {public global
}

decl {\#include "RKR_Input.h"} {public global
}

decl {\#include "RKR_File_Input.h"} {public global
}

decl {\#include "RKR_Group.h"} {public global
}

decl {\#include "RKR_Scroll.h"} {public global
}

decl {\#include "RKR_Tabs.h"} {public global
}

widget_class SettingsWindowGui {open
  xywh {374 295 530 580} type Double
  code0 {\#include "rakarrack.h"}
  code1 {this->m_rkr = NULL;}
  code2 {this->m_rgui = NULL;}
  class Fl_Double_Window size_range {740 554 0 0} visible
} {
  Function {initialize(RKR *_rkr,RKRGUI *_rgui )} {open C return_type void
  } {
    code {m_rkr = _rkr;
m_rgui= _rgui;} {}
  }
  Fl_Box Fondo2 {
    xywh {1 1 525 575}
  }
  Fl_Tabs STabs {
    user_data 1 open
    xywh {0 0 530 580}
    class RKR_Tabs
  } {
    Fl_Group Look {
      label Look
      user_data 1
      xywh {5 26 518 554} box DOWN_FRAME labelfont 1 labelcolor 7 align 4
    } {
      Fl_Box Fondo6 {
        xywh {5 26 518 554}
      }
      Fl_Choice scheme_ch {
        label Schema
        callback {switch ((int)o->value())

{

  case 0:

Fl::scheme("");
Fl::redraw();
break;

  case 1:

Fl::scheme("none");
Fl::redraw();
break;

  case 2:

Fl::scheme("gtk+");
Fl::redraw();
break;

  case 3:

Fl::scheme("plastic");
Fl::redraw();
break;

  case 4:

Fl::scheme("gleam");
Fl::redraw();
break;


}}
        xywh {30 59 88 20} down_box BORDER_BOX labelsize 13 labelcolor 7 align 5 textsize 12 textcolor 7
        code0 {o->set_label_offset(3);}
        code1 {o->set_text_offset(2);}
        class RKR_Choice
      } {
        MenuItem {} {
          label X11
          xywh {30 30 45 26} labelsize 12
        }
        MenuItem {} {
          label fltk
          xywh {30 30 45 26} labelsize 12
        }
        MenuItem {} {
          label {gtk+}
          xywh {40 40 45 26} labelsize 12
        }
        MenuItem {} {
          label plastic
          xywh {50 50 45 26} labelsize 12
        }
        MenuItem {} {
          label gleam
          xywh {60 60 45 26} labelsize 12
        }
      }
      Fl_Browser Font_Bro {
        label Font
        callback {m_rkr->font = (int)o->value()-1;
m_rgui->chfsize(C_DONT_CHANGE_FONT_SIZE);}
        xywh {30 100 400 225} type Select labelcolor 7 align 1 when 1
        class RKR_Browser
      }
      Fl_Box FSLabel {
        label {Font Size}
        xywh {30 333 60 17} labelsize 13 labelcolor 7 align 20
        code0 {o->set_label_offset(3);}
        class RKR_Box
      }
      Fl_Button FSless {
        label {-}
        user_data 77
        callback {m_rgui->chfsize(global_font_size - 1);}
        xywh {95 330 30 20}
        code0 {o->set_label_offset(4);}
        class RKR_Button
      }
      Fl_Button FSplus {
        label {+}
        user_data 77
        callback {m_rgui->chfsize(global_font_size + 1);}
        xywh {130 330 30 20}
        code0 {o->set_label_offset(4);}
        class RKR_Button
      }
      Fl_Button FSReset {
        label Reset
        user_data 77
        callback {m_rgui->chfsize(C_DEFAULT_FONT_SIZE);}
        xywh {165 330 57 20}
        code0 {o->set_label_offset(4);}
        class RKR_Button
      }
      Fl_Box CLLabel {
        label Colors
        xywh {30 358 40 19} labelsize 13 labelcolor 7 align 20
        code0 {o->set_label_offset(3);}
        class RKR_Box
      }
      Fl_Button B_C {
        label Buttons
        user_data 77
        callback {uchar r,g,b;

Fl::get_color(fore_color,r,g,b);
if (!fl_color_chooser("rakarrak buttons color:",r,g,b)) return;
fore_color=fl_rgb_color(r,g,b);
m_rgui->Buttons_Color_Change(fore_color);}
        xywh {30 380 90 25}
        code0 {o->set_label_offset(4);}
        class RKR_Button
      }
      Fl_Button A_C {
        label Labels
        user_data 77
        callback {uchar r,g,b;
Fl::get_color(label_color,r,g,b);
if (!fl_color_chooser("rakarrack label color:",r,g,b)) return;
label_color=fl_rgb_color(r,g,b);
m_rgui->Label_Color_Change(label_color);}
        xywh {130 380 90 25}
        code0 {o->set_label_offset(4);}
        class RKR_Button
      }
      Fl_Button L_C {
        label Leds
        user_data 77
        callback {uchar r,g,b;
Fl::get_color(leds_color,r,g,b);
if (!fl_color_chooser("rakarrack leds color:",r,g,b)) return;
leds_color=fl_rgb_color(r,g,b);
m_rgui->Leds_Color_Change(leds_color);}
        xywh {230 380 90 25}
        code0 {o->set_label_offset(4);}
        class RKR_Button
      }
      Fl_Button K_C {
        label Background
        user_data 77
        callback {uchar r,g,b;
Fl::get_color(back_color,r,g,b);
if (!fl_color_chooser("rakarrack back color:",r,g,b)) return;
back_color=fl_rgb_color(r,g,b);
m_rgui->Background_Color_Change(back_color);}
        xywh {330 380 90 25}
        code0 {o->set_label_offset(4);}
        class RKR_Button
      }
      Fl_Check_Button Enable_Back {
        label {Enable Background Image}
        callback {m_rkr->EnableBackgroundImage=(int) o->value();
m_rgui->PutBackground();}
        xywh {30 415 16 16} down_box DOWN_BOX labelsize 12 labelcolor 7 align 8
        code0 {o->set_label_offset(2);}
        class RKR_Check_Button
      }
      Fl_File_Input BackFiname {
        label {Background Image}
        xywh {30 455 390 40} labelsize 12 labelcolor 7 align 5 textcolor 7
        code0 {o->set_label_offset(2);}
        code1 {o->set_text_offset(4);}
        class RKR_File_Input
      }
      Fl_Button BI_Browser {
        label Browse
        user_data 77
        callback {char *filename;
filename=fl_file_chooser("Browse:","(*.png)",NULL,0);
if (filename==NULL) return;
filename=fl_filename_setext(filename,".png");
BackFiname->value(filename);
strcpy(m_rkr->BackgroundImage,filename);
m_rgui->PutBackground();}
        xywh {427 470 65 20}
        code0 {o->set_label_offset(4);}
        class RKR_Button
      }
      Fl_Check_Button Enable_DeacHide {
        label {Hide Unused Effect Widgets}
        callback {m_rkr->deachide=(int) o->value();
  m_rgui->reordena();}
        xywh {30 500 16 16} down_box DOWN_BOX labelsize 12 labelcolor 7 align 8
        code0 {o->set_label_offset(2);}
        class RKR_Check_Button
      }
      Fl_Check_Button Enable_Scale {
        label {Set Main Window Scalable}
        callback {m_rkr->scalable=(int) o->value();
m_rkr->change_scale = 1; // true}
        xywh {30 525 16 16} down_box DOWN_BOX labelsize 12 labelcolor 7 align 8
        code0 {o->set_label_offset(2);}
        class RKR_Check_Button
      }
    }
    Fl_Group AUDIO_SET {
      label Audio
      user_data 1
      xywh {5 26 518 554} box DOWN_FRAME labelfont 1 labelcolor 7 align 4 hide
    } {
      Fl_Box Fondo7 {
        xywh {5 26 518 554}
      }
      Fl_Check_Button INSTATE {
        label {FX On at start}
        callback {m_rkr->init_state=(int) o->value();}
        xywh {30 40 16 16} down_box DOWN_BOX labelsize 12 labelcolor 7 align 8
        code0 {o->set_label_offset(2);}
        class RKR_Check_Button
      }
      Fl_Check_Button Filter_DC {
        label {Filter Input DC Offset}
        callback {m_rkr->DC_Offset=(int) o->value();}
        xywh {30 64 16 16} down_box DOWN_BOX labelsize 12 labelcolor 7 align 8
        code0 {o->set_label_offset(2);}
        class RKR_Check_Button
      }
      Fl_Check_Button Pre_Serve {
        label {Preserve Gain/Master when Preset change}
        callback {m_rkr->actuvol=(int) o->value();}
        xywh {30 87 16 16} down_box DOWN_BOX labelsize 12 labelcolor 7 align 8
        code0 {o->set_label_offset(2);}
        class RKR_Check_Button
      }
      Fl_Check_Button Update_TAP {
        label {Update TapTempo when Preset change}
        callback {m_rkr->Tap_Updated = (int) o->value();}
        xywh {30 108 16 16} down_box DOWN_BOX labelsize 12 labelcolor 7 align 8
        code0 {o->set_label_offset(2);}
        class RKR_Check_Button
      }
      Fl_Box loop_Label {
        label {Looper Size Seconds}
        user_data 7
        xywh {30 211 136 18} labelsize 12 align 20 when 0
        code0 {o->set_label_offset(2);}
        class RKR_Box
      }
      Fl_Counter L_SIZE {
        callback {m_rkr->looper_size=o->value();
if(!m_rkr->m_displayed)
{
m_rgui->Show_Next_Time();
m_rkr->m_displayed=1;
}}
        xywh {165 210 47 18} type Simple labelsize 10 labelcolor 7 align 4 when 4 minimum 0.5 maximum 30 step 0.5 value 0.5 textsize 10
        class RKR_Counter
      }
      Fl_Box loop_metro_Label {
        label {Looper Metro Volume}
        user_data 7
        xywh {30 237 136 18} labelsize 12 align 20 when 0
        code0 {o->set_label_offset(2);}
        class RKR_Box
      }
      Fl_Counter LM_Volume {
        callback {m_rkr->Metro_Vol=(int)o->value();
m_rkr->efx_Looper->setmvol(m_rkr->Metro_Vol);}
        tooltip {Looper Metronome Volume} xywh {165 237 47 18} type Simple labelsize 12 labelcolor 7 align 8 when 4 minimum 0 maximum 100 step 1 value 50 textsize 10
        code0 {o->set_label_offset(2);}
        class RKR_Counter
      }
      Fl_Check_Button FLPosition {
        label {Limiter before Output Volume}
        callback {m_rkr->flpos=(int)o->value();}
        xywh {30 130 16 16} down_box DOWN_BOX labelsize 12 labelcolor 7 align 8
        code0 {o->set_label_offset(2);}
        class RKR_Check_Button
      }
      Fl_Check_Button DB6B {
        label {+6dB Final Limiter }
        callback {m_rkr->db6booster=(int)o->value();}
        xywh {30 152 16 16} down_box DOWN_BOX labelsize 12 labelcolor 7 align 8
        code0 {o->set_label_offset(2);}
        class RKR_Check_Button
      }
      Fl_Box Calibration_Label {
        label {Tuner Calibration A4}
        user_data 7
        xywh {30 283 136 18} labelsize 12 align 20 when 0
        code0 {o->set_label_offset(2);}
        class RKR_Box
      }
      Fl_Counter Calibration {
        callback {m_rkr->aFreq=o->value();
m_rkr->HarmRecNote->update_freqs(m_rkr->aFreq);
m_rkr->StHarmRecNote->update_freqs(m_rkr->aFreq);
m_rkr->RingRecNote->update_freqs(m_rkr->aFreq);}
        xywh {170 280 116 21} labelsize 10 labelcolor 7 align 4 minimum 420 maximum 460 value 440 textsize 10
        class RKR_Counter
      }
      Fl_Counter RTrigger {
        callback {m_rkr->rtrig = o->value();
m_rkr->HarmRecNote->trigfact = o->value();
m_rkr->StHarmRecNote->trigfact = o->value();
m_rkr->RingRecNote->trigfact = o->value();}
        tooltip {Recognize Note Trigger} xywh {170 310 116 21} labelsize 12 labelcolor 7 align 8 minimum 0.01 maximum 0.99 step 0.01 value 0.6 textsize 10
        code0 {o->lstep(0.1);}
        code1 {o->set_label_offset(2);}
        class RKR_Counter
      }
      Fl_Check_Button UPSAMPLE_C {
        label {Master Upsampling}
        callback {m_rkr->upsample=(int)o->value();
m_rgui->Show_Next_Time();}
        tooltip {Check to Activate Master Upsampling} xywh {30 175 16 16} down_box DOWN_BOX labelsize 12 labelcolor 7 align 8 when 1
        code0 {o->set_label_offset(2);}
        class RKR_Check_Button
      }
      Fl_Choice Upr_Amo {
        label Amount
        callback {m_rkr->UpAmo =(int) o->value();

m_rgui->Show_Next_Time();}
        xywh {241 175 47 18} down_box BORDER_BOX labelsize 11 labelcolor 7 textsize 10 textcolor 7
        code0 {o->set_label_offset(1);}
        class RKR_Choice
      } {
        MenuItem {} {
          label x2
          xywh {75 75 45 26} labelsize 10
        }
        MenuItem {} {
          label x3
          xywh {75 75 45 26} labelsize 10
        }
        MenuItem {} {
          label x4
          xywh {65 65 36 21} labelsize 10
        }
        MenuItem {} {
          label x5
          xywh {55 55 36 21} labelsize 10
        }
        MenuItem {} {
          label x6
          xywh {55 55 36 21} labelsize 10
        }
        MenuItem {} {
          label x7
          xywh {35 35 36 21} labelsize 10
        }
        MenuItem {} {
          label x8
          xywh {35 35 36 21} labelsize 10
        }
        MenuItem {} {
          label x9
          xywh {35 35 36 21} labelsize 10
        }
        MenuItem {} {
          label x10
          xywh {35 35 36 21} labelsize 10
        }
        MenuItem {} {
          label x11
          xywh {35 35 36 21} labelsize 10
        }
        MenuItem {} {
          label x12
          xywh {35 35 36 21} labelsize 10
        }
      }
      Fl_Choice Upr_Qual {
        label Up
        callback {m_rkr->UpQual =(int) o->value();

m_rgui->Show_Next_Time();}
        xywh {313 175 72 18} down_box BORDER_BOX labelsize 11 labelcolor 7 textsize 10 textcolor 7
        code0 {o->set_label_offset(1);}
        class RKR_Choice
      } {
        MenuItem {} {
          label Best
          xywh {65 65 45 26} labelsize 10
        }
        MenuItem {} {
          label Medium
          xywh {65 65 45 26} labelsize 10
        }
        MenuItem {} {
          label Fastest
          xywh {55 55 36 21} labelsize 10
        }
        MenuItem {} {
          label {Zero Order}
          xywh {45 45 36 21} labelsize 10
        }
        MenuItem {} {
          label Linear
          xywh {45 45 36 21} labelsize 10
        }
      }
      Fl_Choice Downr_Qual {
        label Down
        callback {m_rkr->DownQual =(int) o->value();

m_rgui->Show_Next_Time();}
        xywh {425 175 73 18} down_box BORDER_BOX labelsize 11 labelcolor 7 textsize 10 textcolor 7
        code0 {o->menu(menu_Upr_Qual);}
        code1 {o->set_label_offset(1);}
        class RKR_Choice
      } {}
      Fl_Box note_trig_Label {
        label {Note Trigger}
        user_data 7
        xywh {30 312 136 18} labelsize 12 align 20 when 0
        code0 {o->set_label_offset(2);}
        class RKR_Box
      }
      Fl_Box Recognize_Label {
        label {Recognize Note Optimization}
        user_data 7
        xywh {30 360 176 18} labelsize 12 align 20 when 0
        code0 {o->set_label_offset(2);}
        class RKR_Box
      }
      Fl_Choice RC_Harm_Opti {
        label Harmonizer
        callback {m_rkr->RCOpti_Harm =(int) o->value();

switch(m_rkr->RCOpti_Harm)
  {
  
  
    case 0:
    	m_rkr->HarmRecNote->setlpf(5500);
    	m_rkr->HarmRecNote->sethpf(80);
    	break;
    	

    case 1:
    	m_rkr->HarmRecNote->setlpf(4500);
    	m_rkr->HarmRecNote->sethpf(80);
    	break;
    	
    case 2:
    	m_rkr->HarmRecNote->setlpf(3000);
    	m_rkr->HarmRecNote->sethpf(300);
    	break;

}}
        xywh {216 360 72 18} down_box BORDER_BOX labelsize 10 labelcolor 7 align 1 textsize 10 textcolor 7
        class RKR_Choice
      } {
        MenuItem {} {
          label Normal
          xywh {30 360 45 26} labelsize 10
        }
        MenuItem {} {
          label Guitar
          xywh {30 360 45 26} labelsize 10
        }
        MenuItem {} {
          label Voice
          xywh {30 360 36 21} labelsize 10
        }
      }
      Fl_Choice RC_St_Harm_Opti {
        label {Stereo Harmonizer}
        callback {m_rkr->RCOpti_Stereo =(int) o->value();

switch(m_rkr->RCOpti_Stereo)
  {
  
  
    case 0:
    	m_rkr->StHarmRecNote->setlpf(5500);
    	m_rkr->StHarmRecNote->sethpf(80);
    	break;
    	

    case 1:
    	m_rkr->StHarmRecNote->setlpf(4500);
    	m_rkr->StHarmRecNote->sethpf(80);
    	break;
    	
    case 2:
    	m_rkr->StHarmRecNote->setlpf(3000);
    	m_rkr->StHarmRecNote->sethpf(300);
    	break;

}}
        xywh {312 360 72 18} down_box BORDER_BOX labelsize 10 labelcolor 7 align 1 textsize 10 textcolor 7
        code0 {o->menu(menu_RC_Harm_Opti);}
        class RKR_Choice
      } {}
      Fl_Choice RC_Ring_Opti {
        label Ring
        callback {m_rkr->RCOpti_Ring =(int) o->value();

switch(m_rkr->RCOpti_Ring)
  {
  
  
    case 0:
    	m_rkr->RingRecNote->setlpf(5500);
    	m_rkr->RingRecNote->sethpf(80);
    	break;
    	

    case 1:
    	m_rkr->RingRecNote->setlpf(4500);
    	m_rkr->RingRecNote->sethpf(80);
    	break;
    	
    case 2:
    	m_rkr->RingRecNote->setlpf(3000);
    	m_rkr->RingRecNote->sethpf(300);
    	break;

}}
        xywh {408 360 72 18} down_box BORDER_BOX labelsize 10 labelcolor 7 align 1 textsize 10 textcolor 7
        code0 {o->menu(menu_RC_Harm_Opti);}
        class RKR_Choice
      } {}
    }
    Fl_Group QUALITY_SET {
      label Quality
      user_data 1
      xywh {5 26 518 554} box DOWN_FRAME labelfont 1 labelcolor 7 align 4 hide
    } {
      Fl_Box Fondo12 {
        xywh {5 26 518 554}
      }
      Fl_Box Har_Q_Label {
        label {Harmonizer Quality}
        user_data 7
        xywh {30 49 136 18} labelsize 12 align 20 when 0
        code0 {o->set_label_offset(2);}
        class RKR_Box
      }
      Fl_Choice Har_Qual {
        callback {int i = (int) o->value();

switch(i)
{
     case 0:
       m_rkr->HarQual=4;
       break;
     case 1:
       m_rkr->HarQual=8;
       break;
     case 2:
       m_rkr->HarQual=16;	
	break;
     case 3:
       m_rkr->HarQual=32;	
	break;	
}

update_harmonizer_quality();}
        xywh {156 49 47 18} down_box BORDER_BOX labelsize 10 labelcolor 7 align 8 textsize 10 textcolor 7
        class RKR_Choice
      } {
        MenuItem {} {
          label 4
          xywh {50 49 45 26} labelsize 10
        }
        MenuItem {} {
          label 8
          xywh {50 49 45 26} labelsize 10
        }
        MenuItem {} {
          label 16
          xywh {40 49 36 21} labelsize 10
        }
        MenuItem {} {
          label 32
          xywh {40 49 36 21} labelsize 10
        }
      }
      Fl_Choice Seq_Qual {
        label {Sequence Quality}
        callback {int i = (int) o->value();

switch(i)
{
     case 0:
       m_rkr->SeqQual=4;
       break;
     case 1:
       m_rkr->SeqQual=8;
       break;
     case 2:
       m_rkr->SeqQual=16;	
	break;
     case 3:
       m_rkr->SeqQual=32;	
	break;	
}

update_sequence_quality();} open
        xywh {230 49 47 18} down_box BORDER_BOX labelsize 12 labelcolor 7 align 8 textsize 10 textcolor 7
        code0 {o->set_label_offset(2);}
        code1 {o->menu(menu_Har_Qual);}
        class RKR_Choice
      } {}
      Fl_Box Sharm_Q_Label {
        label {StereoHarm Quality}
        user_data 7
        xywh {30 76 136 18} labelsize 12 align 20 when 0
        code0 {o->set_label_offset(2);}
        class RKR_Box
      }
      Fl_Choice Ste_Qual {
        callback {int i = (int) o->value();

switch(i)
{
     case 0:
       m_rkr->SteQual=4;
       break;
     case 1:
       m_rkr->SteQual=8;
       break;
     case 2:
       m_rkr->SteQual=16;	
	break;
     case 3:
       m_rkr->SteQual=32;	
	break;	
}

update_stereoharm_quality();} open
        xywh {156 76 47 18} down_box BORDER_BOX labelsize 12 labelcolor 7 align 8 textsize 10 textcolor 7
        code0 {o->set_label_offset(2);}
        code1 {o->menu(menu_Har_Qual);}
        class RKR_Choice
      } {}
      Fl_Choice Shi_Qual {
        label {Shifter Quality}
        callback {int i = (int) o->value();

switch(i)
{
     case 0:
       m_rkr->ShiQual=4;
       break;
     case 1:
       m_rkr->ShiQual=8;
       break;
     case 2:
       m_rkr->ShiQual=16;	
	break;
     case 3:
       m_rkr->ShiQual=32;	
	break;	
}

update_shifter_quality();} open
        xywh {230 76 47 18} down_box BORDER_BOX labelsize 12 labelcolor 7 align 8 textsize 10 textcolor 7
        code0 {o->set_label_offset(2);}
        code1 {o->menu(menu_Har_Qual);}
        class RKR_Choice
      } {}
      Fl_Box Voc_Band_Label {
        label {Vocoder Bands}
        user_data 7
        xywh {30 104 136 18} labelsize 12 align 20 when 0
        code0 {o->set_label_offset(2);}
        class RKR_Box
      }
      Fl_Choice Voc_Bands {
        callback {switch((int)o->value())
{
  case 0:
  m_rkr->VocBands = 16;
  break;

  case 1:
  m_rkr->VocBands = 32;
  break;

  case 2:
  m_rkr->VocBands = 64;
  break;

  case 3:
  m_rkr->VocBands = 128;
  break;

  case 4:
  m_rkr->VocBands = 256;
  break;

}

update_vocoder_quality();}
        xywh {156 104 47 18} down_box BORDER_BOX labelsize 10 labelcolor 7 align 8 textsize 10 textcolor 7
        class RKR_Choice
      } {
        MenuItem {} {
          label 16
          xywh {80 80 45 26} labelsize 10
        }
        MenuItem {} {
          label 32
          xywh {80 80 45 26} labelsize 10
        }
        MenuItem {} {
          label 64
          xywh {70 70 36 21} labelsize 10
        }
        MenuItem {} {
          label 128
          xywh {60 60 36 21} labelsize 10
        }
        MenuItem {} {
          label 256
          xywh {60 60 36 21} labelsize 10
        }
      }
      Fl_Box Harm_Label {
        label {Harmonizer Downsample}
        user_data 7
        xywh {30 140 156 18} labelsize 12 align 20 when 0
        code0 {o->set_label_offset(2);}
        class RKR_Box
      }
      Fl_Choice Har_Downsample {
        callback {m_rkr->Har_Down=(int)o->value();

update_harmonizer_quality();}
        xywh {205 140 70 18} down_box BORDER_BOX labelsize 10 labelcolor 7 textsize 10 textcolor 7
        class RKR_Choice
      } {
        MenuItem {} {
          label Normal
          xywh {60 140 45 26} labelsize 10
        }
        MenuItem {} {
          label 96000
          xywh {60 140 45 26} labelsize 10
        }
        MenuItem {} {
          label 48000
          xywh {50 140 36 21} labelsize 10
        }
        MenuItem {} {
          label 44100
          xywh {50 140 36 21} labelsize 10
        }
        MenuItem {} {
          label 32000
          xywh {30 140 36 21} labelsize 10
        }
        MenuItem {} {
          label 22050
          xywh {30 140 36 21} labelsize 10
        }
        MenuItem {} {
          label 16000
          xywh {30 140 36 21} labelsize 10
        }
        MenuItem {} {
          label 12000
          xywh {30 140 36 21} labelsize 10
        }
        MenuItem {} {
          label 8000
          xywh {30 140 36 21} labelsize 10
        }
        MenuItem {} {
          label 4000
          xywh {30 140 36 21} labelsize 10
        }
      }
      Fl_Choice Har_Down_Qua {
        label Down
        callback {m_rkr->Har_D_Q=(int)o->value();

update_harmonizer_quality();} open
        xywh {315 140 72 18} down_box BORDER_BOX labelsize 11 labelcolor 7 textsize 10 textcolor 7
        code0 {o->menu(menu_Upr_Qual);}
        code1 {o->set_label_offset(1);}
        class RKR_Choice
      } {}
      Fl_Choice Har_Up_Qua {
        label Up
        callback {m_rkr->Har_U_Q=(int)o->value();

update_harmonizer_quality();} open
        xywh {415 140 72 18} down_box BORDER_BOX labelsize 11 labelcolor 7 textsize 10 textcolor 7
        code0 {o->menu(menu_Upr_Qual);}
        code1 {o->set_label_offset(1);}
        class RKR_Choice
      } {}
      Fl_Box Rev_Label {
        label {Reverbtron Downsample}
        user_data 7
        xywh {30 170 156 18} labelsize 12 align 20 when 0
        code0 {o->set_label_offset(2);}
        class RKR_Box
      }
      Fl_Choice Rev_Downsample {
        callback {m_rkr->Rev_Down=(int)o->value();

update_revtron_quality();} open
        xywh {205 170 70 18} down_box BORDER_BOX labelsize 10 labelcolor 7 textsize 10 textcolor 7
        code0 {o->menu(menu_Har_Downsample);}
        class RKR_Choice
      } {}
      Fl_Choice Rev_Down_Qua {
        label Down
        callback {m_rkr->Rev_D_Q=(int)o->value();

update_revtron_quality();}
        xywh {315 170 72 18} down_box BORDER_BOX labelsize 11 labelcolor 7 textsize 10 textcolor 7
        code0 {o->menu(menu_Upr_Qual);}
        code1 {o->set_label_offset(1);}
        class RKR_Choice
      } {}
      Fl_Choice Rev_Up_Qua {
        label Up
        callback {m_rkr->Rev_U_Q=(int)o->value();

update_revtron_quality();} open
        xywh {415 170 72 18} down_box BORDER_BOX labelsize 11 labelcolor 7 textsize 10 textcolor 7
        code0 {o->menu(menu_Upr_Qual);}
        code1 {o->set_label_offset(1);}
        class RKR_Choice
      } {}
      Fl_Box con_Label {
        label {Convolotron Downsample}
        user_data 7
        xywh {30 200 156 18} labelsize 12 align 20 when 0
        code0 {o->set_label_offset(2);}
        class RKR_Box
      }
      Fl_Choice Con_Downsample {
        callback {m_rkr->Con_Down=(int)o->value();

update_convo_quality();} open
        xywh {205 200 70 18} down_box BORDER_BOX labelsize 10 labelcolor 7 textsize 10 textcolor 7
        code0 {o->menu(menu_Har_Downsample);}
        class RKR_Choice
      } {}
      Fl_Choice Con_Down_Qua {
        label Down
        callback {m_rkr->Con_D_Q=(int)o->value();

update_convo_quality();} open
        xywh {315 200 72 18} down_box BORDER_BOX labelsize 11 labelcolor 7 textsize 10 textcolor 7
        code0 {o->menu(menu_Upr_Qual);}
        code1 {o->set_label_offset(1);}
        class RKR_Choice
      } {}
      Fl_Choice Con_Up_Qua {
        label Up
        callback {m_rkr->Con_U_Q=(int)o->value();

update_convo_quality();} open
        xywh {415 200 72 18} down_box BORDER_BOX labelsize 11 labelcolor 7 textsize 10 textcolor 7
        code0 {o->menu(menu_Upr_Qual);}
        code1 {o->set_label_offset(1);}
        class RKR_Choice
      } {}
      Fl_Box seq_Label {
        label {Sequence Downsample}
        user_data 7
        xywh {30 230 156 18} labelsize 12 align 20 when 0
        code0 {o->set_label_offset(2);}
        class RKR_Box
      }
      Fl_Choice Seq_Downsample {
        callback {m_rkr->Seq_Down=(int)o->value();
update_sequence_quality();} open
        xywh {205 230 70 18} down_box BORDER_BOX labelsize 10 labelcolor 7 textsize 10 textcolor 7
        code0 {o->menu(menu_Har_Downsample);}
        class RKR_Choice
      } {}
      Fl_Choice Seq_Down_Qua {
        label Down
        callback {m_rkr->Seq_D_Q=(int)o->value();
update_sequence_quality();} open
        xywh {315 230 72 18} down_box BORDER_BOX labelsize 11 labelcolor 7 textsize 10 textcolor 7
        code0 {o->menu(menu_Upr_Qual);}
        code1 {o->set_label_offset(1);}
        class RKR_Choice
      } {}
      Fl_Choice Seq_Up_Qua {
        label Up
        callback {m_rkr->Seq_U_Q=(int)o->value();
update_sequence_quality();} open
        xywh {415 230 72 18} down_box BORDER_BOX labelsize 11 labelcolor 7 textsize 10 textcolor 7
        code0 {o->menu(menu_Upr_Qual);}
        code1 {o->set_label_offset(1);}
        class RKR_Choice
      } {}
      Fl_Box shi_Label {
        label {Shifter Downsample}
        user_data 7
        xywh {30 260 156 18} labelsize 12 align 20 when 0
        code0 {o->set_label_offset(2);}
        class RKR_Box
      }
      Fl_Choice Shi_Downsample {
        callback {m_rkr->Shi_Down=(int)o->value();
update_shifter_quality();} open
        xywh {205 260 70 18} down_box BORDER_BOX labelsize 10 labelcolor 7 textsize 10 textcolor 7
        code0 {o->menu(menu_Har_Downsample);}
        class RKR_Choice
      } {}
      Fl_Choice Shi_Down_Qua {
        label Down
        callback {m_rkr->Shi_D_Q=(int)o->value();
update_shifter_quality();} open
        xywh {315 260 72 18} down_box BORDER_BOX labelsize 11 labelcolor 7 textsize 10 textcolor 7
        code0 {o->menu(menu_Upr_Qual);}
        code1 {o->set_label_offset(1);}
        class RKR_Choice
      } {}
      Fl_Choice Shi_Up_Qua {
        label Up
        callback {m_rkr->Shi_U_Q=(int)o->value();
update_shifter_quality();} open
        xywh {415 260 72 18} down_box BORDER_BOX labelsize 11 labelcolor 7 textsize 10 textcolor 7
        code0 {o->menu(menu_Upr_Qual);}
        code1 {o->set_label_offset(1);}
        class RKR_Choice
      } {}
      Fl_Box Voc_Label {
        label {Vocoder Downsample}
        user_data 7
        xywh {30 290 156 18} labelsize 12 align 20 when 0
        code0 {o->set_label_offset(2);}
        class RKR_Box
      }
      Fl_Choice Voc_Downsample {
        callback {m_rkr->Voc_Down=(int)o->value();
update_vocoder_quality();} open
        xywh {205 290 70 18} down_box BORDER_BOX labelsize 10 labelcolor 7 textsize 10 textcolor 7
        code0 {o->menu(menu_Har_Downsample);}
        class RKR_Choice
      } {}
      Fl_Choice Voc_Down_Qua {
        label Down
        callback {m_rkr->Voc_D_Q=(int)o->value();
update_vocoder_quality();} open
        xywh {315 290 72 18} down_box BORDER_BOX labelsize 11 labelcolor 7 textsize 10 textcolor 7
        code0 {o->menu(menu_Upr_Qual);}
        code1 {o->set_label_offset(1);}
        class RKR_Choice
      } {}
      Fl_Choice Voc_Up_Qua {
        label Up
        callback {m_rkr->Voc_U_Q=(int)o->value();
update_vocoder_quality();} open
        xywh {415 290 72 18} down_box BORDER_BOX labelsize 11 labelcolor 7 textsize 10 textcolor 7
        code0 {o->menu(menu_Upr_Qual);}
        code1 {o->set_label_offset(1);}
        class RKR_Choice
      } {}
      Fl_Box Ste_Label {
        label {StereoHarm Downsample}
        user_data 7
        xywh {30 320 156 18} labelsize 12 align 20 when 0
        code0 {o->set_label_offset(2);}
        class RKR_Box
      }
      Fl_Choice Ste_Downsample {
        callback {m_rkr->Ste_Down=(int)o->value();

update_stereoharm_quality();} open
        xywh {205 320 70 18} down_box BORDER_BOX labelsize 10 labelcolor 7 textsize 10 textcolor 7
        code0 {o->menu(menu_Har_Downsample);}
        class RKR_Choice
      } {}
      Fl_Choice Ste_Down_Qua {
        label Down
        callback {m_rkr->Ste_D_Q=(int)o->value();

update_stereoharm_quality();} open
        xywh {315 320 72 18} down_box BORDER_BOX labelsize 11 labelcolor 7 textsize 10 textcolor 7
        code0 {o->menu(menu_Upr_Qual);}
        code1 {o->set_label_offset(1);}
        class RKR_Choice
      } {}
      Fl_Choice Ste_Up_Qua {
        label Up
        callback {m_rkr->Ste_U_Q=(int)o->value();

update_stereoharm_quality();} open
        xywh {415 320 72 18} down_box BORDER_BOX labelsize 11 labelcolor 7 textsize 10 textcolor 7
        code0 {o->menu(menu_Upr_Qual);}
        code1 {o->set_label_offset(1);}
        class RKR_Choice
      } {}
      Fl_Group Wave_Resample {
        label {Waveshape Resampling} open
        xywh {30 370 470 164} box DOWN_FRAME labelcolor 7 align 17
        code0 {o->set_label_offset(4);}
        class RKR_Group
      } {
        Fl_Box Dist_Label {
          label {Distortion Resampling}
          user_data 7
          xywh {45 400 156 18} labelsize 12 labelcolor 7 align 20 when 0
          code0 {o->set_label_offset(2);}
          class RKR_Box
        }
        Fl_Choice Dist_Amo {
          callback {m_rkr->Dist_res_amount=(int)o->value();
update_distortion_quality();}
          xywh {195 400 70 18} down_box BORDER_BOX selection_color 137 labelsize 10 labelcolor 7 textsize 10 textcolor 7
          class RKR_Choice
        } {
          MenuItem {} {
            label Normal
            xywh {90 400 45 26} labelsize 10
          }
          MenuItem {} {
            label x2
            xywh {90 400 45 26} labelsize 10
          }
          MenuItem {} {
            label x4
            xywh {80 400 36 21} labelsize 10
          }
          MenuItem {} {
            label x8
            xywh {70 400 36 21} labelsize 10
          }
          MenuItem {} {
            label x12
            xywh {70 400 36 21} labelsize 10
          }
        }
        Fl_Choice Dist_Down_Qua {
          label Down
          callback {m_rkr->Dist_down_q=(int)o->value();
update_distortion_quality();}
          xywh {305 400 72 18} down_box BORDER_BOX labelsize 11 labelcolor 7 textsize 10 textcolor 7
          code0 {o->menu(menu_Upr_Qual);}
          code1 {o->set_label_offset(1);}
          class RKR_Choice
        } {}
        Fl_Choice Dist_Up_Qua {
          label Up
          callback {m_rkr->Dist_up_q=(int)o->value();
update_distortion_quality();}
          xywh {405 400 72 18} down_box BORDER_BOX labelsize 11 labelcolor 7 textsize 10 textcolor 7
          code0 {o->menu(menu_Upr_Qual);}
          code1 {o->set_label_offset(1);}
          class RKR_Choice
        } {}
        Fl_Box Ovrd_Label {
          label {Overdrive Resampling}
          user_data 7
          xywh {45 425 156 18} labelsize 12 labelcolor 7 align 20 when 0
          code0 {o->set_label_offset(2);}
          class RKR_Box
        }
        Fl_Choice Ovrd_Amo {
          callback {m_rkr->Ovrd_res_amount=(int)o->value();
update_overdrive_quality();}
          xywh {195 425 70 18} down_box BORDER_BOX labelsize 10 labelcolor 7 textsize 10 textcolor 7
          code0 {o->menu(menu_Dist_Amo);}
          class RKR_Choice
        } {}
        Fl_Choice Ovrd_Down_Qua {
          label Down
          callback {m_rkr->Ovrd_down_q=(int)o->value();
update_overdrive_quality();}
          xywh {305 425 72 18} down_box BORDER_BOX labelsize 11 labelcolor 7 textsize 10 textcolor 7
          code0 {o->menu(menu_Upr_Qual);}
          code1 {o->set_label_offset(1);}
          class RKR_Choice
        } {}
        Fl_Choice Ovrd_Up_Qua {
          label Up
          callback {m_rkr->Ovrd_up_q=(int)o->value();
update_overdrive_quality();}
          xywh {405 425 72 18} down_box BORDER_BOX labelsize 11 labelcolor 7 textsize 10 textcolor 7
          code0 {o->menu(menu_Upr_Qual);}
          code1 {o->set_label_offset(1);}
          class RKR_Choice
        } {}
        Fl_Box Dere_Label {
          label {Derelict Resampling}
          user_data 7
          xywh {45 450 156 18} labelsize 12 labelcolor 7 align 20 when 0
          code0 {o->set_label_offset(2);}
          class RKR_Box
        }
        Fl_Choice Dere_Amo {
          callback {m_rkr->Dere_res_amount=(int)o->value();
update_derelict_quality();} open
          xywh {195 450 70 18} down_box BORDER_BOX labelsize 10 labelcolor 7 textsize 10 textcolor 7
          code0 {o->menu(menu_Dist_Amo);}
          class RKR_Choice
        } {}
        Fl_Choice Dere_Down_Qua {
          label Down
          callback {m_rkr->Dere_down_q=(int)o->value();
update_derelict_quality();}
          xywh {305 450 72 18} down_box BORDER_BOX labelsize 11 labelcolor 7 textsize 10 textcolor 7
          code0 {o->menu(menu_Upr_Qual);}
          code1 {o->set_label_offset(1);}
          class RKR_Choice
        } {}
        Fl_Choice Dere_Up_Qua {
          label Up
          callback {m_rkr->Dere_up_q=(int)o->value();
update_derelict_quality();}
          xywh {405 450 72 18} down_box BORDER_BOX labelsize 11 labelcolor 7 textsize 10 textcolor 7
          code0 {o->menu(menu_Upr_Qual);}
          code1 {o->set_label_offset(1);}
          class RKR_Choice
        } {}
        Fl_Box DBand_Label {
          label {DistBand Resampling}
          user_data 7
          xywh {45 475 156 18} labelsize 12 labelcolor 7 align 20 when 0
          code0 {o->set_label_offset(2);}
          class RKR_Box
        }
        Fl_Choice DBand_Amo {
          callback {m_rkr->DBand_res_amount=(int)o->value();
update_distband_quality();}
          xywh {195 475 70 18} down_box BORDER_BOX labelsize 10 labelcolor 7 textsize 10 textcolor 7
          code0 {o->menu(menu_Dist_Amo);}
          class RKR_Choice
        } {}
        Fl_Choice DBand_Down_Qua {
          label Down
          callback {m_rkr->DBand_down_q=(int)o->value();
update_distband_quality();}
          xywh {305 475 72 18} down_box BORDER_BOX labelsize 11 labelcolor 7 textsize 10 textcolor 7
          code0 {o->menu(menu_Upr_Qual);}
          code1 {o->set_label_offset(1);}
          class RKR_Choice
        } {}
        Fl_Choice DBand_Up_Qua {
          label Up
          callback {m_rkr->DBand_up_q=(int)o->value();
update_distband_quality();}
          xywh {405 475 72 18} down_box BORDER_BOX labelsize 11 labelcolor 7 textsize 10 textcolor 7
          code0 {o->menu(menu_Upr_Qual);}
          code1 {o->set_label_offset(1);}
          class RKR_Choice
        } {}
        Fl_Box Stomp_Label {
          label {StompBox Resampling}
          user_data 7
          xywh {45 500 156 18} labelsize 12 labelcolor 7 align 20 when 0
          code0 {o->set_label_offset(2);}
          class RKR_Box
        }
        Fl_Choice Stomp_Amo {
          callback {m_rkr->Stomp_res_amount=(int)o->value();
update_stompbox_quality();}
          xywh {195 500 70 18} down_box BORDER_BOX labelsize 10 labelcolor 7 textsize 10 textcolor 7
          code0 {o->menu(menu_Dist_Amo);}
          class RKR_Choice
        } {}
        Fl_Choice Stomp_Down_Qua {
          label Down
          callback {m_rkr->Stomp_down_q=(int)o->value();
update_stompbox_quality();}
          xywh {305 500 72 18} down_box BORDER_BOX labelsize 11 labelcolor 7 textsize 10 textcolor 7
          code0 {o->menu(menu_Upr_Qual);}
          code1 {o->set_label_offset(1);}
          class RKR_Choice
        } {}
        Fl_Choice Stomp_Up_Qua {
          label Up
          callback {m_rkr->Stomp_up_q=(int)o->value();
update_stompbox_quality();}
          xywh {405 500 72 18} down_box BORDER_BOX labelsize 11 labelcolor 7 textsize 10 textcolor 7
          code0 {o->menu(menu_Upr_Qual);}
          code1 {o->set_label_offset(1);}
          class RKR_Choice
        } {}
      }
    }
    Fl_Group MIDI_SET {
      label MIDI
      user_data 1
      xywh {5 26 518 554} box DOWN_FRAME labelfont 1 labelcolor 7 align 4 hide
    } {
      Fl_Box Fondo8 {
        xywh {5 26 518 554}
      }
      Fl_Check_Button D_A_Connect {
        label {Auto Connect MIDI In}
        callback {m_rkr->aconnect_MI=(int) o->value();

if (m_rkr->aconnect_MI) BMidiIn->activate();
else BMidiIn->deactivate();}
        xywh {30 38 16 16} down_box DOWN_BOX labelsize 12 labelcolor 7 align 8
        code0 {o->set_label_offset(2);}
        class RKR_Check_Button
      }
      Fl_Browser BMidiIn {
        label {ALSA Sequencer Ports}
        callback {int valor;
valor = (int) o->value();
if(o->text(valor) != NULL)
strcpy(m_rkr->MID,o->text(valor));
else return;
o->select(valor,1);
m_rkr->Conecta();}
        xywh {30 83 190 111} type Hold selection_color 0 labelcolor 7 align 5 textcolor 7
        class RKR_Browser
      }
      Fl_Counter Midi_In_Counter {
        label {Effects Receive Channel}
        callback {m_rkr->MidiCh=(int)o->value()-1;}
        xywh {30 210 60 24} type Simple color 25 labelsize 12 labelcolor 7 align 8 minimum 1 maximum 16 step 1 value 1 textsize 12
        code0 {o->set_label_offset(2);}
        code1 {o->set_text_offset(2);}
        class RKR_Counter
      }
      Fl_Counter Har_In_Counter {
        label {Harmonizer Receive Channel}
        callback {m_rkr->HarCh=(int)o->value()-1;}
        xywh {245 210 60 24} type Simple color 25 labelsize 12 labelcolor 7 align 8 minimum 1 maximum 16 step 1 value 1 textsize 12
        code0 {o->set_label_offset(2);}
        code1 {o->set_text_offset(2);}
        class RKR_Counter
      }
      Fl_Counter Stereo_Har_In_Counter {
        label {Stereo Harm Receive Channel}
        callback {m_rkr->StereoHarCh=(int)o->value()-1;}
        xywh {245 265 60 24} type Simple color 25 labelsize 12 labelcolor 7 align 8 minimum 1 maximum 16 step 1 value 1 textsize 12
        code0 {o->set_label_offset(2);}
        code1 {o->set_text_offset(2);}
        class RKR_Counter
      }
      Fl_Group wMIDI {
        label {MIDI implementation} open
        xywh {30 266 180 23} box DOWN_FRAME labelsize 12 labelcolor 7 align 5
        code0 {o->set_label_offset(2);}
        class RKR_Group
      } {
        Fl_Check_Button Mw0 {
          label Default
          callback {m_rkr->MIDIway=0;
m_rgui->ML_Menu->deactivate();}
          xywh {35 268 16 16} type Radio down_box DOWN_BOX labelsize 12 labelcolor 7 align 8
          code0 {o->set_label_offset(2);}
          class RKR_Check_Button
        }
        Fl_Check_Button Mw1 {
          label {MIDI Learn}
          callback {m_rkr->MIDIway=1;
m_rgui->ML_Menu->activate();}
          xywh {119 268 16 16} type Radio down_box DOWN_BOX labelsize 12 labelcolor 7 align 8
          code0 {o->set_label_offset(2);}
          class RKR_Check_Button
        }
      }
      Fl_Check_Button AAssign {
        label {Auto Assign MIDI Learn}
        callback {m_rkr->autoassign=o->value();}
        xywh {30 308 16 16} down_box DOWN_BOX labelsize 12 labelcolor 7 align 8
        code0 {o->set_label_offset(2);}
        class RKR_Check_Button
      }
      Fl_Check_Button MTable {
        label {MIDI Program Change Table}
        callback {m_rkr->midi_table=o->value();
if(m_rkr->midi_table) scroll->activate(); else 
scroll->deactivate();}
        xywh {30 336 16 16} down_box DOWN_BOX labelsize 12 labelcolor 7 align 8
        code0 {o->set_label_offset(2);}
        class RKR_Check_Button
      }
      Fl_Button {} {
        label Load
        callback {m_rgui->Load_Midi_Program_Change_Table();}
        tooltip {Load program change table from file} xywh {254 331 70 20}
        code0 {o->set_label_offset(4);}
        class RKR_Button
      }
      Fl_Button {} {
        label Save
        callback {m_rgui->Save_Midi_Program_Change_Table();}
        tooltip {Save current program change table to file} xywh {338 331 70 20}
        code0 {o->set_label_offset(4);}
        class RKR_Button
      }
      Fl_Scroll scroll {
        user_data 5000
        xywh {30 366 360 162} type VERTICAL_ALWAYS
        class RKR_Scroll
      } {}
    }
    Fl_Group JACK_SET {
      label Jack
      user_data 1
      xywh {5 26 518 554} box DOWN_FRAME labelfont 1 labelcolor 7 align 4 hide
    } {
      Fl_Box Fondo9 {
        xywh {5 26 518 554}
      }
      Fl_Check_Button D_J_Connect {
        label {Auto Connect Out}
        callback {m_rkr->aconnect_JA=(int) o->value();
if (m_rkr->aconnect_JA) JackCo->activate();
else JackCo->deactivate();}
        xywh {30 45 16 16} down_box DOWN_BOX labelsize 12 labelcolor 7 align 8
        code0 {o->set_label_offset(2);}
        class RKR_Check_Button
      }
      Fl_Browser JackCo {
        label {Output Ports}
        xywh {30 85 260 140} type Multi selection_color 0 labelcolor 7 align 5 textcolor 7
        class RKR_Browser
      }
      Fl_Check_Button D_IJ_Connect {
        label {Auto Connect In}
        callback {m_rkr->aconnect_JIA=(int) o->value();
if (m_rkr->aconnect_JIA) JackIn->activate();
else JackIn->deactivate();}
        xywh {30 245 16 16} down_box DOWN_BOX labelsize 12 labelcolor 7 align 8
        code0 {o->set_label_offset(2);}
        class RKR_Check_Button
      }
      Fl_Browser JackIn {
        label {Input Ports}
        xywh {30 285 260 140} type Multi selection_color 0 labelcolor 7 align 5 textcolor 7
        class RKR_Browser
      }
    }
    Fl_Group MISC_SET {
      label Misc
      user_data 1
      xywh {5 26 518 554} box DOWN_FRAME labelfont 1 labelcolor 7 align 4 hide
    } {
      Fl_Box Fondo10 {
        xywh {5 26 518 554}
      }
      Fl_Input Username {
        label Username
        callback {m_rkr->UserRealName=(char*) o->value();}
        xywh {30 58 240 21} labelcolor 7 align 5 textcolor 7
        code0 {o->set_label_offset(4);}
        code1 {o->set_text_offset(4);}
        class RKR_Input
      }
      Fl_Check_Button MES_DIS {
        label {Disable Warnings    }
        callback {m_rkr->mess_dis=(int) o->value();}
        xywh {30 90 16 16} down_box DOWN_BOX labelsize 12 labelcolor 7 align 8
        code0 {o->set_label_offset(2);}
        class RKR_Check_Button
      }
      Fl_Check_Button T_TIMEOUT {
        label {Tap Tempo Timeout}
        callback {m_rkr->t_timeout=(int) o->value();}
        xywh {30 110 16 16} down_box DOWN_BOX labelsize 12 labelcolor 7 align 8
        code0 {o->set_label_offset(2);}
        class RKR_Check_Button
      }
      Fl_Check_Button ENA_TOOL {
        label {Enable Tooltips       }
        callback {m_rkr->ena_tool=(int) o->value();
Fl_Tooltip::enable(m_rkr->ena_tool);}
        xywh {30 130 16 16} down_box DOWN_BOX labelsize 12 labelcolor 7 align 8
        code0 {o->set_label_offset(2);}
        class RKR_Check_Button
      }
    }
    Fl_Group BANK_SET {
      label Bank
      user_data 1
      xywh {5 26 518 554} box DOWN_FRAME labelfont 1 labelcolor 7 align 4 hide
    } {
      Fl_Box Fondo11 {
        xywh {5 26 518 554}
      }
      Fl_File_Input BFiname {
        label {Bank Filename}
        xywh {20 50 390 40} labelsize 12 labelcolor 7 align 5 textcolor 7
        code0 {o->set_label_offset(2);}
        code1 {o->set_text_offset(4);}
        class RKR_File_Input
      }
      Fl_Button BF_Browser {
        label Browse
        user_data 77
        callback {char *filename;
filename=fl_file_chooser("Browse:","(*.rkrb)",NULL,0);
if (filename==NULL) return;
filename=fl_filename_setext(filename,".rkrb");
BFiname->value(filename);
strcpy(m_rkr->BankFilename,filename);}
        xywh {415 65 65 20}
        code0 {o->set_label_offset(4);}
        class RKR_Button
      }
      Fl_File_Input Udir {
        label {User Directory}
        xywh {20 120 390 40} labelsize 12 labelcolor 7 align 5 textcolor 7
        code0 {o->set_label_offset(2);}
        code1 {o->set_text_offset(4);}
        class RKR_File_Input
      }
      Fl_Button UD_Browser {
        label Browse
        user_data 77
        callback {char *dir;
dir=fl_dir_chooser("Browse:",NULL,0);
if (dir==NULL) return;
Udir->value(dir);
strcpy(m_rkr->UDirFilename,dir);
m_rgui->Scan_Bank_Dir();}
        xywh {415 135 65 20}
        code0 {o->set_label_offset(4);}
        class RKR_Button
      }
    }
  }
  decl {RKR* m_rkr} {private local
  }
  decl {RKRGUI* m_rgui} {private local
  }
  Function {get_menu_Har_Downsample()} {C return_type {Fl_Menu_Item *}
  } {
    code {return menu_Har_Downsample;} {}
  }
  Function {make_table_window()} {} {
    code {// Fill settings midi table scroll
      scroll->begin();
    
      for (intptr_t y=0; y<128; y++)
      {
          char buf[20];
          sprintf(buf,"%d",(int)y);
          RKR_Box* b = new RKR_Box(6,y*25+22,40,25);
          b->box(FL_DOWN_BOX);
          b->copy_label(buf);
          b->labelcolor(FL_BLACK);
          b->user_data((void *) c_bank_number);
    
          RKR_Choice* cb = new RKR_Choice(120,y*25+25,40,20);
          cb->copy_label("Bank");
          cb->labelcolor(FL_WHITE);
          cb->add("1");
          cb->add("2");
          cb->add("3");
          cb->add("U");
          cb->user_data((void *) (c_bank_used + y));
          cb->callback((Fl_Callback *)m_rgui->bank_click);
          cb->set_label_offset(4);
          cb->set_text_offset(4);
    
          RKR_Choice* cp = new RKR_Choice(225,y*25+25,130,20);
          cp->copy_label("Preset");
          cp->labelcolor(FL_WHITE);
          cp->user_data((void *) (c_preset_used + y));
          cp->callback((Fl_Callback *)m_rgui->p_click);
          cp->set_label_offset(4);
          cp->set_text_offset(4);
      }
    
      scroll->end();
      
      Put_MidiTable();
      
      /* Resize because the starting window may have been resized.
       * Adjusted to the current size of the window group which is
       * MIDI_SET->w(), MIDI_SET->h(). If the group default size is
       * ever changed in fluid, the magic numbers must be changed to match */
      int MIDI_set_start_width = 518;     // The MIDI group default width - set in fluid
      int MIDI_set_start_height = 554;    // The MIDI group default height - set in fluid
      float W_midi_set_ratio = (float) MIDI_SET->w() / MIDI_set_start_width;
      float H_midi_set_ratio = (float) MIDI_SET->h() / MIDI_set_start_height;
      
      scroll->resize
      (
        (float) scroll->get_start_x() * W_midi_set_ratio,
        (float) scroll->get_start_y() * H_midi_set_ratio,
        ((float) scroll->get_start_width() * W_midi_set_ratio),
        (float) scroll->get_start_height() * H_midi_set_ratio
      );} {}
  }
  Function {fill_mptable(int num,int value)} {} {
    code {// Fill settings scroll
    for (int t=0; t < scroll->children(); t++)
    {
        Fl_Widget *w = scroll->child(t);
        long long temp = (long long) w->user_data();
        if ((int)temp == num)
        {
            RKR_Choice *p = (RKR_Choice * ) w;
            p->clear();
            for(int i=1; i<=60; i++)
            {
                if(m_rkr->B_Names[value][i].Preset_Name[0] != 0)
                {
                    p->add(m_rkr->B_Names[value][i].Preset_Name);
                }
                else
                {
                    char buf[64];
                    sprintf(buf,"Untitled (%d)", i);
                    p->add(buf);
                }
            }
            p->redraw();
            break;
        }
    }} {selected
    }
  }
  Function {mtfillvalue(int num,int value)} {} {
    code {// fill settings scroll midi table
    for (int t=0; t < scroll->children(); t++)
    {
        Fl_Widget *w = scroll->child(t);
        long long temp = (long long) w->user_data();
        if ((int)temp == num)
        {
            RKR_Choice *p = (RKR_Choice * ) w;
            p->value(value);
            break;
        }
    }} {}
  }
  Function {Put_MidiTable()} {} {
    code {// Put_MidiTable
  for(int i=0; i<128; i++)
  {
      mtfillvalue(i + c_bank_used, m_rkr->M_table[i].bank);
      fill_mptable(i + c_preset_used, m_rkr->M_table[i].bank);
      mtfillvalue(i + c_preset_used, m_rkr->M_table[i].preset);
  }} {}
  }
  Function {update_convo_quality()} {return_type void
  } {
    code {/* shut off all processing */
m_rkr->quality_update = true;

/* Wait a bit */
usleep(C_MILLISECONDS_25);

/* Save current parameters */
std::vector<int> save_state = m_rkr->efx_Convol->save_parameters();

/* Save current file name and path */
std::string filename(m_rkr->efx_Convol->Filename);

/* Delete and re-create the efx with new downsample settings */
delete m_rkr->efx_Convol;
m_rkr->efx_Convol = new Convolotron(m_rkr->Con_Down, m_rkr->Con_U_Q, m_rkr->Con_D_Q, m_rkr->fSample_rate, m_rkr->period);

/* Wait for things to complete */
usleep(C_MILLISECONDS_50);

/* Reset parameters and filename */
m_rkr->efx_Convol->reset_parameters(save_state);

/* Check for user file and re-load if present */
if(m_rkr->efx_Convol->getpar(4))
{
    strcpy(m_rkr->efx_Convol->Filename,filename.c_str());
    if(!m_rkr->efx_Convol->setfile(USERFILE))
    {
        fl_alert("Error loading %s file!\\n", filename.c_str());
    };
}

/* Turn processing back on */
m_rkr->quality_update = false;} {}
  }
  Function {update_revtron_quality()} {return_type void
  } {
    code {/* shut off all processing */
m_rkr->quality_update = true;

/* Wait a bit */
usleep(C_MILLISECONDS_25);

/* Save current parameters */
std::vector<int> save_state = m_rkr->efx_Reverbtron->save_parameters();

/* Save current file name and path */
std::string filename(m_rkr->efx_Reverbtron->Filename);

/* Delete and re-create the efx with new downsample settings */
delete m_rkr->efx_Reverbtron;
m_rkr->efx_Reverbtron = new Reverbtron(m_rkr->Rev_Down, m_rkr->Rev_U_Q, m_rkr->Rev_D_Q, m_rkr->fSample_rate, m_rkr->period);

/* Wait for things to complete */
usleep(C_MILLISECONDS_50);

/* Reset parameters and filename */
m_rkr->efx_Reverbtron->reset_parameters(save_state);

/* Check for user file and re-load if present */
if(m_rkr->efx_Reverbtron->getpar(4))
{
    strcpy(m_rkr->efx_Reverbtron->Filename,filename.c_str());
    if(!m_rkr->efx_Reverbtron->setfile(USERFILE))
    {
        fl_alert("Error loading %s file!\\n", filename.c_str());
    };
}

/* Turn processing back on */
m_rkr->quality_update = false;} {}
  }
  Function {update_harmonizer_quality()} {return_type void
  } {
    code {/* shut off all processing */
m_rkr->quality_update = true;

/* This is for the gui bypass */
int hold_bypass = m_rkr->Harmonizer_Bypass;
m_rkr->Harmonizer_Bypass = 0;

/* Wait a bit */
usleep(C_MILLISECONDS_25);

/* Save current parameters */
std::vector<int> save_state = m_rkr->efx_Har->save_parameters();

/* Delete and re-create the efx with new downsample settings */
delete m_rkr->efx_Har;
m_rkr->efx_Har = new Harmonizer((long) rkr->HarQual, rkr->Har_Down, rkr->Har_U_Q, rkr->Har_D_Q, rkr->fSample_rate, rkr->period);
/* Wait for things to complete */
usleep(C_MILLISECONDS_50);

/* Reset parameters and filename */
m_rkr->efx_Har->reset_parameters(save_state);

/* Turn processing back on */
m_rkr->quality_update = false;

/* Reset bypass */ 
m_rkr->Harmonizer_Bypass = hold_bypass;

/* Reset user select */
if(m_rkr->efx_Har->getpar(5))
{
    m_rkr->efx_Har->changepar(5, m_rkr->efx_Har->getpar(5));
    m_rkr->RC_Harm->cleanup();
    m_rgui->Chord(0);
}} {}
  }
  Function {update_stereoharm_quality()} {return_type void
  } {
    code {/* shut off all processing */
m_rkr->quality_update = true;

/* This is for the gui bypass */
int hold_bypass = m_rkr->StereoHarm_Bypass;
m_rkr->StereoHarm_Bypass = 0;

/* Wait a bit */
usleep(C_MILLISECONDS_25);

/* Save current parameters */
std::vector<int> save_state = m_rkr->efx_StereoHarm->save_parameters();

/* Delete and re-create the efx with new downsample settings */
delete m_rkr->efx_StereoHarm;
m_rkr->efx_StereoHarm = new StereoHarm((long) m_rkr->SteQual, m_rkr->Ste_Down, m_rkr->Ste_U_Q, m_rkr->Ste_D_Q, m_rkr->fSample_rate, m_rkr->period);
/* Wait for things to complete */
usleep(C_MILLISECONDS_50);

/* Reset parameters and filename */
m_rkr->efx_StereoHarm->reset_parameters(save_state);

/* Turn processing back on */
m_rkr->quality_update = false;

/* Reset bypass */ 
m_rkr->StereoHarm_Bypass = hold_bypass;

/* Reset user select */
if(m_rkr->efx_StereoHarm->getpar(7))
{
    m_rkr->efx_StereoHarm->changepar(7, m_rkr->efx_StereoHarm->getpar(7));
    m_rkr->RC_Stereo_Harm->cleanup();
    m_rgui->Chord(1);
}} {}
  }
  Function {update_sequence_quality()} {return_type void
  } {
    code {/* This is for the gui bypass, tempo change */
int hold_bypass = m_rkr->Sequence_Bypass;
m_rkr->Sequence_Bypass = 0;

/* shut off all processing */
m_rkr->quality_update = true;

/* Wait a bit */
usleep(C_MILLISECONDS_25);

/* Save current parameters */
std::vector<int> save_state = m_rkr->efx_Sequence->save_parameters();

/* Delete and re-create the efx with new downsample settings */
delete m_rkr->efx_Sequence;
m_rkr->efx_Sequence = new Sequence((long) m_rkr->SeqQual, m_rkr->Seq_Down, m_rkr->Seq_U_Q, m_rkr->Seq_D_Q, m_rkr->fSample_rate, m_rkr->period);

/* Wait for things to complete */
usleep(C_MILLISECONDS_50);

/* Reset parameters */
m_rkr->efx_Sequence->reset_parameters(save_state);

/* Turn processing back on */
m_rkr->quality_update = false;

/* Reset bypass */ 
m_rkr->Sequence_Bypass = hold_bypass;} {}
  }
  Function {update_shifter_quality()} {return_type void
  } {
    code {/* shut off all processing */
m_rkr->quality_update = true;

/* Wait a bit */
usleep(C_MILLISECONDS_25);

/* Save current parameters */
std::vector<int> save_state = m_rkr->efx_Shifter->save_parameters();

/* Delete and re-create the efx with new downsample settings */
delete m_rkr->efx_Shifter;
m_rkr->efx_Shifter = new Shifter((long) m_rkr->ShiQual, m_rkr->Shi_Down, m_rkr->Shi_U_Q, m_rkr->Shi_D_Q, m_rkr->fSample_rate, m_rkr->period);

/* Wait for things to complete */
usleep(C_MILLISECONDS_50);

/* Reset parameters */
m_rkr->efx_Shifter->reset_parameters(save_state);

/* Turn processing back on */
m_rkr->quality_update = false;} {}
  }
  Function {update_vocoder_quality()} {return_type void
  } {
    code {/* This is for the gui volume meter */
int hold_bypass = m_rkr->Vocoder_Bypass;
m_rkr->Vocoder_Bypass = 0;

/* shut off all processing */
m_rkr->quality_update = true;

/* Wait a bit */
usleep(C_MILLISECONDS_25);

/* Save current parameters */
std::vector<int> save_state = m_rkr->efx_Vocoder->save_parameters();

/* Delete and re-create the efx with new downsample settings */
delete m_rkr->efx_Vocoder;
m_rkr->efx_Vocoder = new Vocoder(m_rkr->auxresampled, m_rkr->VocBands, m_rkr->Voc_Down, m_rkr->Voc_U_Q, m_rkr->Voc_D_Q, m_rkr->fSample_rate, m_rkr->period);

/* Wait for things to complete */
usleep(C_MILLISECONDS_50);

/* Reset parameters */
m_rkr->efx_Vocoder->reset_parameters(save_state);

/* Turn processing back on */
m_rkr->quality_update = false;

/* Reset bypass */
m_rkr->Vocoder_Bypass = hold_bypass;} {}
  }
  Function {update_distortion_quality()} {return_type void
  } {
    code {/* shut off all processing */
m_rkr->quality_update = true;

/* Wait a bit */
usleep(C_MILLISECONDS_25);

/* Save current parameters */
std::vector<int> save_state = m_rkr->efx_Distorsion->save_parameters();

/* Delete and re-create the efx with new resample settings */
delete m_rkr->efx_Distorsion;
m_rkr->efx_Distorsion = new Distorsion(m_rkr->Dist_res_amount, m_rkr->Dist_up_q, m_rkr->Dist_down_q, m_rkr->fSample_rate, m_rkr->period);

/* Wait for things to complete */
usleep(C_MILLISECONDS_50);

/* Reset parameters */
m_rkr->efx_Distorsion->reset_parameters(save_state);

/* Turn processing back on */
m_rkr->quality_update = false;} {}
  }
  Function {update_overdrive_quality()} {return_type void
  } {
    code {/* shut off all processing */
m_rkr->quality_update = true;

/* Wait a bit */
usleep(C_MILLISECONDS_25);

/* Save current parameters */
std::vector<int> save_state = m_rkr->efx_Overdrive->save_parameters();

/* Delete and re-create the efx with new resample settings */
delete m_rkr->efx_Overdrive;
m_rkr->efx_Overdrive = new Distorsion(m_rkr->Ovrd_res_amount, m_rkr->Ovrd_up_q, m_rkr->Ovrd_down_q, m_rkr->fSample_rate, m_rkr->period);

/* Wait for things to complete */
usleep(C_MILLISECONDS_50);

/* Reset parameters */
m_rkr->efx_Overdrive->reset_parameters(save_state);

/* Turn processing back on */
m_rkr->quality_update = false;} {}
  }
  Function {update_derelict_quality()} {return_type void
  } {
    code {/* shut off all processing */
m_rkr->quality_update = true;

/* Wait a bit */
usleep(C_MILLISECONDS_25);

/* Save current parameters */
std::vector<int> save_state = m_rkr->efx_Derelict->save_parameters();

/* Delete and re-create the efx with new resample settings */
delete m_rkr->efx_Derelict;
m_rkr->efx_Derelict = new Derelict(m_rkr->Dere_res_amount, m_rkr->Dere_up_q, m_rkr->Dere_down_q, m_rkr->fSample_rate, m_rkr->period);

/* Wait for things to complete */
usleep(C_MILLISECONDS_50);

/* Reset parameters */
m_rkr->efx_Derelict->reset_parameters(save_state);

/* Turn processing back on */
m_rkr->quality_update = false;} {}
  }
  Function {update_distband_quality()} {return_type void
  } {
    code {/* shut off all processing */
m_rkr->quality_update = true;

/* Wait a bit */
usleep(C_MILLISECONDS_25);

/* Save current parameters */
std::vector<int> save_state = m_rkr->efx_DistBand->save_parameters();

/* Delete and re-create the efx with new resample settings */
delete m_rkr->efx_DistBand;
m_rkr->efx_DistBand = new DistBand(m_rkr->DBand_res_amount, m_rkr->DBand_up_q, m_rkr->DBand_down_q, m_rkr->fSample_rate, m_rkr->period);

/* Wait for things to complete */
usleep(C_MILLISECONDS_50);

/* Reset parameters */
m_rkr->efx_DistBand->reset_parameters(save_state);

/* Turn processing back on */
m_rkr->quality_update = false;} {}
  }
  Function {update_stompbox_quality()} {return_type void
  } {
    code {/* shut off all processing */
m_rkr->quality_update = true;

/* Wait a bit */
usleep(C_MILLISECONDS_25);

/* Save current parameters */
std::vector<int> save_state = m_rkr->efx_StompBox->save_parameters();

/* Delete and re-create the efx with new resample settings */
delete m_rkr->efx_StompBox;
m_rkr->efx_StompBox = new StompBox(m_rkr->Stomp_res_amount, m_rkr->Stomp_up_q, m_rkr->Stomp_down_q, m_rkr->fSample_rate, m_rkr->period);

/* Wait for things to complete */
usleep(C_MILLISECONDS_50);

/* Reset parameters */
m_rkr->efx_StompBox->reset_parameters(save_state);

/* Turn processing back on */
m_rkr->quality_update = false;} {}
  }
}
